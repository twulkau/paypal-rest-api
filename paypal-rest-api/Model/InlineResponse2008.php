<?php
/**
 * InlineResponse2008
 *
 * PHP version 5
 *
 * @category Class
 * @package  PayPal\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PayPal APIs
 *
 * # Getting Started  ## Step 1: Fork the collection using Run in Postman  [](https://god.gw.postman.com/run-collection/19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24?action=collection/fork&collection-url=entityId=19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24&entityType=collection&workspaceId=345300e6-346e-42e0-aed1-53717919aef0#?env[PayPal%20Override%20Env]=W3sia2V5IjoiUGxlYXNlIE5vdGUgLS0+IiwidmFsdWUiOiI8IFBheVBhbCBQdWJsaWMgQ29sbGVjdGlvbiBjb21lcyB3aXRoIGRlZmF1bHQgcHVibGljIHNldCBvZiBjcmVkZW50aWFscyBzdG9yZWQgYXQgdGhlIENvbGxlY3Rpb24gbGV2ZWwuIFxuVGhpcyBlbnZpcm9ubWVudCBvdmVycmlkZXMgdGhvc2UgZGVmYXVsdCB2YXJpYWJsZXMuIFlvdSBtYXkgYnJpbmcgeW91ciBvd24gY3JlZGVudGlhbHMgZnJvbSBQYXlQYWwgRGV2ZWxvcGVyIERhc2hib2FyZCBhbmQgcGFzdGUgdGhlbSBoZXJlLiBEbyBub3QgZm9yZ290IHRvIGVuYWJsZSB0aGUgdmFpYWJsZSBieSBjaGVja2luZyB0aGUgYm94IGFuZCBoaXQgXCJTYXZlXCIgYmVmb3JlIGludm9raW5nIHRoZSBQYXlQYWwgQVBJcy4gPiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiI8IGNvcHkgY3JlZGVudGlhbHMgZnJvbSB5b3VyIGRldmVsb3Blci5wYXlwYWwuY29tIGFuZCBwYXN0ZSB0aGVtIGhlcmUgPiIsImVuYWJsZWQiOmZhbHNlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IjwgY29weSBjcmVkZW50aWFscyBmcm9tIHlvdXIgZGV2ZWxvcGVyLnBheXBhbC5jb20gYW5kIHBhc3RlIHRoZW0gaGVyZSA+IiwiZW5hYmxlZCI6ZmFsc2V9XQ==)  [![](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24?action=collection/fork&collection-url=entityId=19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24&entityType=collection&workspaceId=345300e6-346e-42e0-aed1-53717919aef0#?env[PayPal%20Override%20Env]=W3sia2V5IjoiUGxlYXNlIE5vdGUgLS0+IiwidmFsdWUiOiI8IFBheVBhbCBQdWJsaWMgQ29sbGVjdGlvbiBjb21lcyB3aXRoIGRlZmF1bHQgcHVibGljIHNldCBvZiBjcmVkZW50aWFscyBzdG9yZWQgYXQgdGhlIENvbGxlY3Rpb24gbGV2ZWwuIFxuVGhpcyBlbnZpcm9ubWVudCBvdmVycmlkZXMgdGhvc2UgZGVmYXVsdCB2YXJpYWJsZXMuIFlvdSBtYXkgYnJpbmcgeW91ciBvd24gY3JlZGVudGlhbHMgZnJvbSBQYXlQYWwgRGV2ZWxvcGVyIERhc2hib2FyZCBhbmQgcGFzdGUgdGhlbSBoZXJlLiBEbyBub3QgZm9yZ290IHRvIGVuYWJsZSB0aGUgdmFpYWJsZSBieSBjaGVja2luZyB0aGUgYm94IGFuZCBoaXQgXCJTYXZlXCIgYmVmb3JlIGludm9raW5nIHRoZSBQYXlQYWwgQVBJcy4gPiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiI8IGNvcHkgY3JlZGVudGlhbHMgZnJvbSB5b3VyIGRldmVsb3Blci5wYXlwYWwuY29tIGFuZCBwYXN0ZSB0aGVtIGhlcmUgPiIsImVuYWJsZWQiOmZhbHNlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IjwgY29weSBjcmVkZW50aWFscyBmcm9tIHlvdXIgZGV2ZWxvcGVyLnBheXBhbC5jb20gYW5kIHBhc3RlIHRoZW0gaGVyZSA+IiwiZW5hYmxlZCI6ZmFsc2V9XQ==)  ## Step 2: Get your access token  An access token is automatically generated using a default `client_id` and `secret`. PayPal recommends using your own `client_id` and `secret` from the [Developer Dashboard](https://www.paypal.com/signin?intent=developer&returnUri=https%3A%2F%2Fdeveloper.paypal.com%2Fdeveloper%2Fapplication) by entering the values under the **Variables** tab. A pre-request script will generate and manage the `access_token` automatically.  > **Note:** Your developer account `client_id` and `secret` may have a different scope than the default `client_id` and `secret`.  ## Step 3: Make your first API call  PayPal recommends starting with the Orders API. These steps will use the Orders API to create an order and capture payment using [sandbox accounts](https://developer.paypal.com/developer/accounts) linked to your Developer Dashboard account.  To create an order:  1. In your workspace, navigate to your fork of the PayPal collection. 1. Select **Orders > Create Order**. 1. Select the **Send** button to create the order. On a successful call, the API returns a 201 order created response code. 1. In the response, find the **approve** link. 1. Open the **approve** link in a browser. 1. Log in with your Developer Dashboard Sandbox Personal Account credentials. You can find those credentials by logging into the Developer Dashboard and selecting **Sandbox > Account** 1. Select the **Continue** button. Payment has now been made.  To capture payment:  1. In the response of the order you created, find the `order_id`. 1. In the **Variables** tab, enter the `order_id` number. 1. Select **Orders > Capture payment for order**. 1. Select **Send**. On a successful call, the API returns a 201 order created response code.  Your order has been created and payment has been captured. You can verify the transaction in both the sandbox personal account and the sandbox business account.  ![Buyer Payment Verification](https://www.paypalobjects.com/devdoc/transaction-details-buyer.png) ![Seller Payment Verification](https://www.paypalobjects.com/devdoc/transaction-details-seller.png)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PayPal\RestApi\Model;

use \ArrayAccess;
use \PayPal\RestApi\ObjectSerializer;

/**
 * InlineResponse2008 Class Doc Comment
 *
 * @category Class
 * @package  PayPal\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2008 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_8';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time' => 'string',
        'dispute_amount' => '\PayPal\RestApi\Model\InlineResponse2008DisputeAmount',
        'dispute_channel' => 'string',
        'dispute_id' => 'string',
        'dispute_life_cycle_stage' => 'string',
        'dispute_outcome' => '\PayPal\RestApi\Model\InlineResponse2008DisputeOutcome',
        'dispute_state' => 'string',
        'disputed_transactions' => '\PayPal\RestApi\Model\InlineResponse2008DisputedTransactions[]',
        'evidences' => '\PayPal\RestApi\Model\InlineResponse2008Evidences[]',
        'extensions' => '\PayPal\RestApi\Model\InlineResponse2008Extensions',
        'fee_policy' => '\PayPal\RestApi\Model\InlineResponse2008FeePolicy',
        'history' => '\PayPal\RestApi\Model\InlineResponse2008History[]',
        'links' => '\PayPal\RestApi\Model\InlineResponse2008Links[]',
        'messages' => '\PayPal\RestApi\Model\InlineResponse2008Messages[]',
        'money_movements' => '\PayPal\RestApi\Model\InlineResponse2008MoneyMovements[]',
        'offer' => '\PayPal\RestApi\Model\InlineResponse2008Offer',
        'reason' => 'string',
        'refund_details' => '\PayPal\RestApi\Model\InlineResponse2008RefundDetails',
        'status' => 'string',
        'update_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time' => null,
        'dispute_amount' => null,
        'dispute_channel' => null,
        'dispute_id' => null,
        'dispute_life_cycle_stage' => null,
        'dispute_outcome' => null,
        'dispute_state' => null,
        'disputed_transactions' => null,
        'evidences' => null,
        'extensions' => null,
        'fee_policy' => null,
        'history' => null,
        'links' => null,
        'messages' => null,
        'money_movements' => null,
        'offer' => null,
        'reason' => null,
        'refund_details' => null,
        'status' => null,
        'update_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'create_time',
        'dispute_amount' => 'dispute_amount',
        'dispute_channel' => 'dispute_channel',
        'dispute_id' => 'dispute_id',
        'dispute_life_cycle_stage' => 'dispute_life_cycle_stage',
        'dispute_outcome' => 'dispute_outcome',
        'dispute_state' => 'dispute_state',
        'disputed_transactions' => 'disputed_transactions',
        'evidences' => 'evidences',
        'extensions' => 'extensions',
        'fee_policy' => 'fee_policy',
        'history' => 'history',
        'links' => 'links',
        'messages' => 'messages',
        'money_movements' => 'money_movements',
        'offer' => 'offer',
        'reason' => 'reason',
        'refund_details' => 'refund_details',
        'status' => 'status',
        'update_time' => 'update_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'dispute_amount' => 'setDisputeAmount',
        'dispute_channel' => 'setDisputeChannel',
        'dispute_id' => 'setDisputeId',
        'dispute_life_cycle_stage' => 'setDisputeLifeCycleStage',
        'dispute_outcome' => 'setDisputeOutcome',
        'dispute_state' => 'setDisputeState',
        'disputed_transactions' => 'setDisputedTransactions',
        'evidences' => 'setEvidences',
        'extensions' => 'setExtensions',
        'fee_policy' => 'setFeePolicy',
        'history' => 'setHistory',
        'links' => 'setLinks',
        'messages' => 'setMessages',
        'money_movements' => 'setMoneyMovements',
        'offer' => 'setOffer',
        'reason' => 'setReason',
        'refund_details' => 'setRefundDetails',
        'status' => 'setStatus',
        'update_time' => 'setUpdateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'dispute_amount' => 'getDisputeAmount',
        'dispute_channel' => 'getDisputeChannel',
        'dispute_id' => 'getDisputeId',
        'dispute_life_cycle_stage' => 'getDisputeLifeCycleStage',
        'dispute_outcome' => 'getDisputeOutcome',
        'dispute_state' => 'getDisputeState',
        'disputed_transactions' => 'getDisputedTransactions',
        'evidences' => 'getEvidences',
        'extensions' => 'getExtensions',
        'fee_policy' => 'getFeePolicy',
        'history' => 'getHistory',
        'links' => 'getLinks',
        'messages' => 'getMessages',
        'money_movements' => 'getMoneyMovements',
        'offer' => 'getOffer',
        'reason' => 'getReason',
        'refund_details' => 'getRefundDetails',
        'status' => 'getStatus',
        'update_time' => 'getUpdateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['dispute_amount'] = isset($data['dispute_amount']) ? $data['dispute_amount'] : null;
        $this->container['dispute_channel'] = isset($data['dispute_channel']) ? $data['dispute_channel'] : null;
        $this->container['dispute_id'] = isset($data['dispute_id']) ? $data['dispute_id'] : null;
        $this->container['dispute_life_cycle_stage'] = isset($data['dispute_life_cycle_stage']) ? $data['dispute_life_cycle_stage'] : null;
        $this->container['dispute_outcome'] = isset($data['dispute_outcome']) ? $data['dispute_outcome'] : null;
        $this->container['dispute_state'] = isset($data['dispute_state']) ? $data['dispute_state'] : null;
        $this->container['disputed_transactions'] = isset($data['disputed_transactions']) ? $data['disputed_transactions'] : null;
        $this->container['evidences'] = isset($data['evidences']) ? $data['evidences'] : null;
        $this->container['extensions'] = isset($data['extensions']) ? $data['extensions'] : null;
        $this->container['fee_policy'] = isset($data['fee_policy']) ? $data['fee_policy'] : null;
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['money_movements'] = isset($data['money_movements']) ? $data['money_movements'] : null;
        $this->container['offer'] = isset($data['offer']) ? $data['offer'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['refund_details'] = isset($data['refund_details']) ? $data['refund_details'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets dispute_amount
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008DisputeAmount
     */
    public function getDisputeAmount()
    {
        return $this->container['dispute_amount'];
    }

    /**
     * Sets dispute_amount
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008DisputeAmount $dispute_amount dispute_amount
     *
     * @return $this
     */
    public function setDisputeAmount($dispute_amount)
    {
        $this->container['dispute_amount'] = $dispute_amount;

        return $this;
    }

    /**
     * Gets dispute_channel
     *
     * @return string
     */
    public function getDisputeChannel()
    {
        return $this->container['dispute_channel'];
    }

    /**
     * Sets dispute_channel
     *
     * @param string $dispute_channel dispute_channel
     *
     * @return $this
     */
    public function setDisputeChannel($dispute_channel)
    {
        $this->container['dispute_channel'] = $dispute_channel;

        return $this;
    }

    /**
     * Gets dispute_id
     *
     * @return string
     */
    public function getDisputeId()
    {
        return $this->container['dispute_id'];
    }

    /**
     * Sets dispute_id
     *
     * @param string $dispute_id dispute_id
     *
     * @return $this
     */
    public function setDisputeId($dispute_id)
    {
        $this->container['dispute_id'] = $dispute_id;

        return $this;
    }

    /**
     * Gets dispute_life_cycle_stage
     *
     * @return string
     */
    public function getDisputeLifeCycleStage()
    {
        return $this->container['dispute_life_cycle_stage'];
    }

    /**
     * Sets dispute_life_cycle_stage
     *
     * @param string $dispute_life_cycle_stage dispute_life_cycle_stage
     *
     * @return $this
     */
    public function setDisputeLifeCycleStage($dispute_life_cycle_stage)
    {
        $this->container['dispute_life_cycle_stage'] = $dispute_life_cycle_stage;

        return $this;
    }

    /**
     * Gets dispute_outcome
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008DisputeOutcome
     */
    public function getDisputeOutcome()
    {
        return $this->container['dispute_outcome'];
    }

    /**
     * Sets dispute_outcome
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008DisputeOutcome $dispute_outcome dispute_outcome
     *
     * @return $this
     */
    public function setDisputeOutcome($dispute_outcome)
    {
        $this->container['dispute_outcome'] = $dispute_outcome;

        return $this;
    }

    /**
     * Gets dispute_state
     *
     * @return string
     */
    public function getDisputeState()
    {
        return $this->container['dispute_state'];
    }

    /**
     * Sets dispute_state
     *
     * @param string $dispute_state dispute_state
     *
     * @return $this
     */
    public function setDisputeState($dispute_state)
    {
        $this->container['dispute_state'] = $dispute_state;

        return $this;
    }

    /**
     * Gets disputed_transactions
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008DisputedTransactions[]
     */
    public function getDisputedTransactions()
    {
        return $this->container['disputed_transactions'];
    }

    /**
     * Sets disputed_transactions
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008DisputedTransactions[] $disputed_transactions disputed_transactions
     *
     * @return $this
     */
    public function setDisputedTransactions($disputed_transactions)
    {
        $this->container['disputed_transactions'] = $disputed_transactions;

        return $this;
    }

    /**
     * Gets evidences
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008Evidences[]
     */
    public function getEvidences()
    {
        return $this->container['evidences'];
    }

    /**
     * Sets evidences
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008Evidences[] $evidences evidences
     *
     * @return $this
     */
    public function setEvidences($evidences)
    {
        $this->container['evidences'] = $evidences;

        return $this;
    }

    /**
     * Gets extensions
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008Extensions
     */
    public function getExtensions()
    {
        return $this->container['extensions'];
    }

    /**
     * Sets extensions
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008Extensions $extensions extensions
     *
     * @return $this
     */
    public function setExtensions($extensions)
    {
        $this->container['extensions'] = $extensions;

        return $this;
    }

    /**
     * Gets fee_policy
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008FeePolicy
     */
    public function getFeePolicy()
    {
        return $this->container['fee_policy'];
    }

    /**
     * Sets fee_policy
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008FeePolicy $fee_policy fee_policy
     *
     * @return $this
     */
    public function setFeePolicy($fee_policy)
    {
        $this->container['fee_policy'] = $fee_policy;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008History[]
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008History[] $history history
     *
     * @return $this
     */
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008Links[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008Links[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008Messages[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008Messages[] $messages messages
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets money_movements
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008MoneyMovements[]
     */
    public function getMoneyMovements()
    {
        return $this->container['money_movements'];
    }

    /**
     * Sets money_movements
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008MoneyMovements[] $money_movements money_movements
     *
     * @return $this
     */
    public function setMoneyMovements($money_movements)
    {
        $this->container['money_movements'] = $money_movements;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008Offer
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008Offer $offer offer
     *
     * @return $this
     */
    public function setOffer($offer)
    {
        $this->container['offer'] = $offer;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets refund_details
     *
     * @return \PayPal\RestApi\Model\InlineResponse2008RefundDetails
     */
    public function getRefundDetails()
    {
        return $this->container['refund_details'];
    }

    /**
     * Sets refund_details
     *
     * @param \PayPal\RestApi\Model\InlineResponse2008RefundDetails $refund_details refund_details
     *
     * @return $this
     */
    public function setRefundDetails($refund_details)
    {
        $this->container['refund_details'] = $refund_details;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


