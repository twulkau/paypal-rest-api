<?php
/**
 * DisputesApi
 * PHP version 5
 *
 * @category Class
 * @package  PayPal\Rest-Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PayPal APIs
 *
 * # Getting Started  ## Step 1: Fork the collection using Run in Postman  [](https://god.gw.postman.com/run-collection/19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24?action=collection/fork&collection-url=entityId=19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24&entityType=collection&workspaceId=345300e6-346e-42e0-aed1-53717919aef0#?env[PayPal%20Override%20Env]=W3sia2V5IjoiUGxlYXNlIE5vdGUgLS0+IiwidmFsdWUiOiI8IFBheVBhbCBQdWJsaWMgQ29sbGVjdGlvbiBjb21lcyB3aXRoIGRlZmF1bHQgcHVibGljIHNldCBvZiBjcmVkZW50aWFscyBzdG9yZWQgYXQgdGhlIENvbGxlY3Rpb24gbGV2ZWwuIFxuVGhpcyBlbnZpcm9ubWVudCBvdmVycmlkZXMgdGhvc2UgZGVmYXVsdCB2YXJpYWJsZXMuIFlvdSBtYXkgYnJpbmcgeW91ciBvd24gY3JlZGVudGlhbHMgZnJvbSBQYXlQYWwgRGV2ZWxvcGVyIERhc2hib2FyZCBhbmQgcGFzdGUgdGhlbSBoZXJlLiBEbyBub3QgZm9yZ290IHRvIGVuYWJsZSB0aGUgdmFpYWJsZSBieSBjaGVja2luZyB0aGUgYm94IGFuZCBoaXQgXCJTYXZlXCIgYmVmb3JlIGludm9raW5nIHRoZSBQYXlQYWwgQVBJcy4gPiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiI8IGNvcHkgY3JlZGVudGlhbHMgZnJvbSB5b3VyIGRldmVsb3Blci5wYXlwYWwuY29tIGFuZCBwYXN0ZSB0aGVtIGhlcmUgPiIsImVuYWJsZWQiOmZhbHNlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IjwgY29weSBjcmVkZW50aWFscyBmcm9tIHlvdXIgZGV2ZWxvcGVyLnBheXBhbC5jb20gYW5kIHBhc3RlIHRoZW0gaGVyZSA+IiwiZW5hYmxlZCI6ZmFsc2V9XQ==)  [![](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24?action=collection/fork&collection-url=entityId=19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24&entityType=collection&workspaceId=345300e6-346e-42e0-aed1-53717919aef0#?env[PayPal%20Override%20Env]=W3sia2V5IjoiUGxlYXNlIE5vdGUgLS0+IiwidmFsdWUiOiI8IFBheVBhbCBQdWJsaWMgQ29sbGVjdGlvbiBjb21lcyB3aXRoIGRlZmF1bHQgcHVibGljIHNldCBvZiBjcmVkZW50aWFscyBzdG9yZWQgYXQgdGhlIENvbGxlY3Rpb24gbGV2ZWwuIFxuVGhpcyBlbnZpcm9ubWVudCBvdmVycmlkZXMgdGhvc2UgZGVmYXVsdCB2YXJpYWJsZXMuIFlvdSBtYXkgYnJpbmcgeW91ciBvd24gY3JlZGVudGlhbHMgZnJvbSBQYXlQYWwgRGV2ZWxvcGVyIERhc2hib2FyZCBhbmQgcGFzdGUgdGhlbSBoZXJlLiBEbyBub3QgZm9yZ290IHRvIGVuYWJsZSB0aGUgdmFpYWJsZSBieSBjaGVja2luZyB0aGUgYm94IGFuZCBoaXQgXCJTYXZlXCIgYmVmb3JlIGludm9raW5nIHRoZSBQYXlQYWwgQVBJcy4gPiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiI8IGNvcHkgY3JlZGVudGlhbHMgZnJvbSB5b3VyIGRldmVsb3Blci5wYXlwYWwuY29tIGFuZCBwYXN0ZSB0aGVtIGhlcmUgPiIsImVuYWJsZWQiOmZhbHNlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IjwgY29weSBjcmVkZW50aWFscyBmcm9tIHlvdXIgZGV2ZWxvcGVyLnBheXBhbC5jb20gYW5kIHBhc3RlIHRoZW0gaGVyZSA+IiwiZW5hYmxlZCI6ZmFsc2V9XQ==)  ## Step 2: Get your access token  An access token is automatically generated using a default `client_id` and `secret`. PayPal recommends using your own `client_id` and `secret` from the [Developer Dashboard](https://www.paypal.com/signin?intent=developer&returnUri=https%3A%2F%2Fdeveloper.paypal.com%2Fdeveloper%2Fapplication) by entering the values under the **Variables** tab. A pre-request script will generate and manage the `access_token` automatically.  > **Note:** Your developer account `client_id` and `secret` may have a different scope than the default `client_id` and `secret`.  ## Step 3: Make your first API call  PayPal recommends starting with the Orders API. These steps will use the Orders API to create an order and capture payment using [sandbox accounts](https://developer.paypal.com/developer/accounts) linked to your Developer Dashboard account.  To create an order:  1. In your workspace, navigate to your fork of the PayPal collection. 1. Select **Orders > Create Order**. 1. Select the **Send** button to create the order. On a successful call, the API returns a 201 order created response code. 1. In the response, find the **approve** link. 1. Open the **approve** link in a browser. 1. Log in with your Developer Dashboard Sandbox Personal Account credentials. You can find those credentials by logging into the Developer Dashboard and selecting **Sandbox > Account** 1. Select the **Continue** button. Payment has now been made.  To capture payment:  1. In the response of the order you created, find the `order_id`. 1. In the **Variables** tab, enter the `order_id` number. 1. Select **Orders > Capture payment for order**. 1. Select **Send**. On a successful call, the API returns a 201 order created response code.  Your order has been created and payment has been captured. You can verify the transaction in both the sandbox personal account and the sandbox business account.  ![Buyer Payment Verification](https://www.paypalobjects.com/devdoc/transaction-details-buyer.png) ![Seller Payment Verification](https://www.paypalobjects.com/devdoc/transaction-details-seller.png)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PayPal\Rest-Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PayPal\Rest-Api\ApiException;
use PayPal\Rest-Api\Configuration;
use PayPal\Rest-Api\HeaderSelector;
use PayPal\Rest-Api\ObjectSerializer;

/**
 * DisputesApi Class Doc Comment
 *
 * @category Class
 * @package  PayPal\Rest-Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DisputesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptClaim
     *
     * Accept claim
     *
     * @param  object $dispute_id dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function acceptClaim($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $this->acceptClaimWithHttpInfo($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);
    }

    /**
     * Operation acceptClaimWithHttpInfo
     *
     * Accept claim
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptClaimWithHttpInfo($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '';
        $request = $this->acceptClaimRequest($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation acceptClaimAsync
     *
     * Accept claim
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptClaimAsync($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        return $this->acceptClaimAsyncWithHttpInfo($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptClaimAsyncWithHttpInfo
     *
     * Accept claim
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptClaimAsyncWithHttpInfo($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '';
        $request = $this->acceptClaimRequest($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptClaim'
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acceptClaimRequest($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling acceptClaim'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/accept-claim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($pay_pal_request_id !== null) {
            $headerParams['PayPal-Request-Id'] = ObjectSerializer::toHeaderValue($pay_pal_request_id);
        }
        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($pay_pal_partner_attribution_id !== null) {
            $headerParams['PayPal-Partner-Attribution-Id'] = ObjectSerializer::toHeaderValue($pay_pal_partner_attribution_id);
        }
        // header params
        if ($pay_pal_auth_assertion !== null) {
            $headerParams['PayPal-Auth-Assertion'] = ObjectSerializer::toHeaderValue($pay_pal_auth_assertion);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($prefer2 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer2);
        }

        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acceptOfferToResolveDispute
     *
     * Accept offer to resolve dispute
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function acceptOfferToResolveDispute($dispute_id)
    {
        $this->acceptOfferToResolveDisputeWithHttpInfo($dispute_id);
    }

    /**
     * Operation acceptOfferToResolveDisputeWithHttpInfo
     *
     * Accept offer to resolve dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptOfferToResolveDisputeWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->acceptOfferToResolveDisputeRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation acceptOfferToResolveDisputeAsync
     *
     * Accept offer to resolve dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptOfferToResolveDisputeAsync($dispute_id)
    {
        return $this->acceptOfferToResolveDisputeAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptOfferToResolveDisputeAsyncWithHttpInfo
     *
     * Accept offer to resolve dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptOfferToResolveDisputeAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->acceptOfferToResolveDisputeRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptOfferToResolveDispute'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acceptOfferToResolveDisputeRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling acceptOfferToResolveDispute'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/accept-offer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation acknowledgeReturnedItem
     *
     * Acknowledge returned item
     *
     * @param  object $dispute_id dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function acknowledgeReturnedItem($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $this->acknowledgeReturnedItemWithHttpInfo($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);
    }

    /**
     * Operation acknowledgeReturnedItemWithHttpInfo
     *
     * Acknowledge returned item
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function acknowledgeReturnedItemWithHttpInfo($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '';
        $request = $this->acknowledgeReturnedItemRequest($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation acknowledgeReturnedItemAsync
     *
     * Acknowledge returned item
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acknowledgeReturnedItemAsync($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        return $this->acknowledgeReturnedItemAsyncWithHttpInfo($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acknowledgeReturnedItemAsyncWithHttpInfo
     *
     * Acknowledge returned item
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acknowledgeReturnedItemAsyncWithHttpInfo($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '';
        $request = $this->acknowledgeReturnedItemRequest($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acknowledgeReturnedItem'
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acknowledgeReturnedItemRequest($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling acknowledgeReturnedItem'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/acknowledge-return-item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($pay_pal_request_id !== null) {
            $headerParams['PayPal-Request-Id'] = ObjectSerializer::toHeaderValue($pay_pal_request_id);
        }
        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($pay_pal_partner_attribution_id !== null) {
            $headerParams['PayPal-Partner-Attribution-Id'] = ObjectSerializer::toHeaderValue($pay_pal_partner_attribution_id);
        }
        // header params
        if ($pay_pal_auth_assertion !== null) {
            $headerParams['PayPal-Auth-Assertion'] = ObjectSerializer::toHeaderValue($pay_pal_auth_assertion);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($prefer2 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer2);
        }

        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appealDispute
     *
     * Appeal dispute
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function appealDispute($dispute_id)
    {
        $this->appealDisputeWithHttpInfo($dispute_id);
    }

    /**
     * Operation appealDisputeWithHttpInfo
     *
     * Appeal dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function appealDisputeWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->appealDisputeRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation appealDisputeAsync
     *
     * Appeal dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appealDisputeAsync($dispute_id)
    {
        return $this->appealDisputeAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appealDisputeAsyncWithHttpInfo
     *
     * Appeal dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appealDisputeAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->appealDisputeRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appealDispute'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appealDisputeRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling appealDispute'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/appeal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation denyOfferToResolveDispute
     *
     * Deny offer to resolve dispute
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function denyOfferToResolveDispute($dispute_id)
    {
        $this->denyOfferToResolveDisputeWithHttpInfo($dispute_id);
    }

    /**
     * Operation denyOfferToResolveDisputeWithHttpInfo
     *
     * Deny offer to resolve dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function denyOfferToResolveDisputeWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->denyOfferToResolveDisputeRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation denyOfferToResolveDisputeAsync
     *
     * Deny offer to resolve dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function denyOfferToResolveDisputeAsync($dispute_id)
    {
        return $this->denyOfferToResolveDisputeAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation denyOfferToResolveDisputeAsyncWithHttpInfo
     *
     * Deny offer to resolve dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function denyOfferToResolveDisputeAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->denyOfferToResolveDisputeRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'denyOfferToResolveDispute'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function denyOfferToResolveDisputeRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling denyOfferToResolveDispute'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/deny-offer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation escalateDisputeToClaim
     *
     * Escalate dispute to claim
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function escalateDisputeToClaim($dispute_id)
    {
        $this->escalateDisputeToClaimWithHttpInfo($dispute_id);
    }

    /**
     * Operation escalateDisputeToClaimWithHttpInfo
     *
     * Escalate dispute to claim
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function escalateDisputeToClaimWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->escalateDisputeToClaimRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation escalateDisputeToClaimAsync
     *
     * Escalate dispute to claim
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function escalateDisputeToClaimAsync($dispute_id)
    {
        return $this->escalateDisputeToClaimAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation escalateDisputeToClaimAsyncWithHttpInfo
     *
     * Escalate dispute to claim
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function escalateDisputeToClaimAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->escalateDisputeToClaimRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'escalateDisputeToClaim'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function escalateDisputeToClaimRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling escalateDisputeToClaim'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/escalate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDisputes
     *
     * List disputes
     *
     * @param  object $start_time Filters the disputes in the response by a creation date and time. The start time must be within the last 180 days. Value is in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameters. (optional)
     * @param  object $disputed_transaction_id Filters the disputes in the response by a transaction, by ID.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameter. (optional)
     * @param  object $page_size Limits the number of disputes in the response to this value. (optional)
     * @param  object $next_page_token The token that describes the next page of results to fetch. The &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/customer-disputes/v1/#disputes_list\&quot;&gt;list disputes&lt;/a&gt; call returns this token in the HATEOAS links in the response. (optional)
     * @param  object $dispute_state Filters the disputes in the response by a state. Separate multiple values with a comma (&#x60;,&#x60;). When you specify more than one dispute_state, the response lists disputes that belong to any of the specified dispute_state. (optional)
     * @param  object $update_time_before The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_before must be within the last 180 days and the default is the current time. (optional)
     * @param  object $update_time_after The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_after must be within the last 180 days and the default is the maximum time (180 days) supported. (optional)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listDisputes($start_time = null, $disputed_transaction_id = null, $page_size = null, $next_page_token = null, $dispute_state = null, $update_time_before = null, $update_time_after = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $this->listDisputesWithHttpInfo($start_time, $disputed_transaction_id, $page_size, $next_page_token, $dispute_state, $update_time_before, $update_time_after, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);
    }

    /**
     * Operation listDisputesWithHttpInfo
     *
     * List disputes
     *
     * @param  object $start_time Filters the disputes in the response by a creation date and time. The start time must be within the last 180 days. Value is in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameters. (optional)
     * @param  object $disputed_transaction_id Filters the disputes in the response by a transaction, by ID.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameter. (optional)
     * @param  object $page_size Limits the number of disputes in the response to this value. (optional)
     * @param  object $next_page_token The token that describes the next page of results to fetch. The &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/customer-disputes/v1/#disputes_list\&quot;&gt;list disputes&lt;/a&gt; call returns this token in the HATEOAS links in the response. (optional)
     * @param  object $dispute_state Filters the disputes in the response by a state. Separate multiple values with a comma (&#x60;,&#x60;). When you specify more than one dispute_state, the response lists disputes that belong to any of the specified dispute_state. (optional)
     * @param  object $update_time_before The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_before must be within the last 180 days and the default is the current time. (optional)
     * @param  object $update_time_after The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_after must be within the last 180 days and the default is the maximum time (180 days) supported. (optional)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDisputesWithHttpInfo($start_time = null, $disputed_transaction_id = null, $page_size = null, $next_page_token = null, $dispute_state = null, $update_time_before = null, $update_time_after = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '';
        $request = $this->listDisputesRequest($start_time, $disputed_transaction_id, $page_size, $next_page_token, $dispute_state, $update_time_before, $update_time_after, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation listDisputesAsync
     *
     * List disputes
     *
     * @param  object $start_time Filters the disputes in the response by a creation date and time. The start time must be within the last 180 days. Value is in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameters. (optional)
     * @param  object $disputed_transaction_id Filters the disputes in the response by a transaction, by ID.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameter. (optional)
     * @param  object $page_size Limits the number of disputes in the response to this value. (optional)
     * @param  object $next_page_token The token that describes the next page of results to fetch. The &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/customer-disputes/v1/#disputes_list\&quot;&gt;list disputes&lt;/a&gt; call returns this token in the HATEOAS links in the response. (optional)
     * @param  object $dispute_state Filters the disputes in the response by a state. Separate multiple values with a comma (&#x60;,&#x60;). When you specify more than one dispute_state, the response lists disputes that belong to any of the specified dispute_state. (optional)
     * @param  object $update_time_before The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_before must be within the last 180 days and the default is the current time. (optional)
     * @param  object $update_time_after The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_after must be within the last 180 days and the default is the maximum time (180 days) supported. (optional)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDisputesAsync($start_time = null, $disputed_transaction_id = null, $page_size = null, $next_page_token = null, $dispute_state = null, $update_time_before = null, $update_time_after = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        return $this->listDisputesAsyncWithHttpInfo($start_time, $disputed_transaction_id, $page_size, $next_page_token, $dispute_state, $update_time_before, $update_time_after, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDisputesAsyncWithHttpInfo
     *
     * List disputes
     *
     * @param  object $start_time Filters the disputes in the response by a creation date and time. The start time must be within the last 180 days. Value is in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameters. (optional)
     * @param  object $disputed_transaction_id Filters the disputes in the response by a transaction, by ID.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameter. (optional)
     * @param  object $page_size Limits the number of disputes in the response to this value. (optional)
     * @param  object $next_page_token The token that describes the next page of results to fetch. The &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/customer-disputes/v1/#disputes_list\&quot;&gt;list disputes&lt;/a&gt; call returns this token in the HATEOAS links in the response. (optional)
     * @param  object $dispute_state Filters the disputes in the response by a state. Separate multiple values with a comma (&#x60;,&#x60;). When you specify more than one dispute_state, the response lists disputes that belong to any of the specified dispute_state. (optional)
     * @param  object $update_time_before The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_before must be within the last 180 days and the default is the current time. (optional)
     * @param  object $update_time_after The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_after must be within the last 180 days and the default is the maximum time (180 days) supported. (optional)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDisputesAsyncWithHttpInfo($start_time = null, $disputed_transaction_id = null, $page_size = null, $next_page_token = null, $dispute_state = null, $update_time_before = null, $update_time_after = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '';
        $request = $this->listDisputesRequest($start_time, $disputed_transaction_id, $page_size, $next_page_token, $dispute_state, $update_time_before, $update_time_after, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDisputes'
     *
     * @param  object $start_time Filters the disputes in the response by a creation date and time. The start time must be within the last 180 days. Value is in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameters. (optional)
     * @param  object $disputed_transaction_id Filters the disputes in the response by a transaction, by ID.&lt;br/&gt;&lt;br/&gt;You can specify either but not both the &#x60;start_time&#x60; and &#x60;disputed_transaction_id&#x60; query parameter. (optional)
     * @param  object $page_size Limits the number of disputes in the response to this value. (optional)
     * @param  object $next_page_token The token that describes the next page of results to fetch. The &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/customer-disputes/v1/#disputes_list\&quot;&gt;list disputes&lt;/a&gt; call returns this token in the HATEOAS links in the response. (optional)
     * @param  object $dispute_state Filters the disputes in the response by a state. Separate multiple values with a comma (&#x60;,&#x60;). When you specify more than one dispute_state, the response lists disputes that belong to any of the specified dispute_state. (optional)
     * @param  object $update_time_before The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_before must be within the last 180 days and the default is the current time. (optional)
     * @param  object $update_time_after The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *&#x60;yyyy&#x60;*-*&#x60;MM&#x60;*-*&#x60;dd&#x60;*&#x60;T&#x60;*&#x60;HH&#x60;*:*&#x60;mm&#x60;*:*&#x60;ss&#x60;*.*&#x60;SSS&#x60;*&#x60;Z&#x60;. update_time_after must be within the last 180 days and the default is the maximum time (180 days) supported. (optional)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDisputesRequest($start_time = null, $disputed_transaction_id = null, $page_size = null, $next_page_token = null, $dispute_state = null, $update_time_before = null, $update_time_after = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {

        $resourcePath = '/v1/customer/disputes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_time !== null) {
            $queryParams['start_time'] = ObjectSerializer::toQueryValue($start_time);
        }
        // query params
        if ($disputed_transaction_id !== null) {
            $queryParams['disputed_transaction_id'] = ObjectSerializer::toQueryValue($disputed_transaction_id);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($next_page_token !== null) {
            $queryParams['next_page_token'] = ObjectSerializer::toQueryValue($next_page_token);
        }
        // query params
        if ($dispute_state !== null) {
            $queryParams['dispute_state'] = ObjectSerializer::toQueryValue($dispute_state);
        }
        // query params
        if ($update_time_before !== null) {
            $queryParams['update_time_before'] = ObjectSerializer::toQueryValue($update_time_before);
        }
        // query params
        if ($update_time_after !== null) {
            $queryParams['update_time_after'] = ObjectSerializer::toQueryValue($update_time_after);
        }
        // header params
        if ($pay_pal_request_id !== null) {
            $headerParams['PayPal-Request-Id'] = ObjectSerializer::toHeaderValue($pay_pal_request_id);
        }
        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($pay_pal_partner_attribution_id !== null) {
            $headerParams['PayPal-Partner-Attribution-Id'] = ObjectSerializer::toHeaderValue($pay_pal_partner_attribution_id);
        }
        // header params
        if ($pay_pal_auth_assertion !== null) {
            $headerParams['PayPal-Auth-Assertion'] = ObjectSerializer::toHeaderValue($pay_pal_auth_assertion);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($prefer2 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer2);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation makeOfferToResolveDispute
     *
     * Make offer to resolve dispute
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function makeOfferToResolveDispute($dispute_id)
    {
        $this->makeOfferToResolveDisputeWithHttpInfo($dispute_id);
    }

    /**
     * Operation makeOfferToResolveDisputeWithHttpInfo
     *
     * Make offer to resolve dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function makeOfferToResolveDisputeWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->makeOfferToResolveDisputeRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation makeOfferToResolveDisputeAsync
     *
     * Make offer to resolve dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function makeOfferToResolveDisputeAsync($dispute_id)
    {
        return $this->makeOfferToResolveDisputeAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation makeOfferToResolveDisputeAsyncWithHttpInfo
     *
     * Make offer to resolve dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function makeOfferToResolveDisputeAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->makeOfferToResolveDisputeRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'makeOfferToResolveDispute'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function makeOfferToResolveDisputeRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling makeOfferToResolveDispute'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/make-offer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partiallyUpdateDispute
     *
     * Partially update dispute
     *
     * @param  object $dispute_id dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function partiallyUpdateDispute($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $this->partiallyUpdateDisputeWithHttpInfo($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);
    }

    /**
     * Operation partiallyUpdateDisputeWithHttpInfo
     *
     * Partially update dispute
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function partiallyUpdateDisputeWithHttpInfo($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '';
        $request = $this->partiallyUpdateDisputeRequest($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation partiallyUpdateDisputeAsync
     *
     * Partially update dispute
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partiallyUpdateDisputeAsync($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        return $this->partiallyUpdateDisputeAsyncWithHttpInfo($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partiallyUpdateDisputeAsyncWithHttpInfo
     *
     * Partially update dispute
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partiallyUpdateDisputeAsyncWithHttpInfo($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '';
        $request = $this->partiallyUpdateDisputeRequest($dispute_id, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partiallyUpdateDispute'
     *
     * @param  object $dispute_id (required)
     * @param  object $pay_pal_request_id The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager. (optional)
     * @param  object $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  object $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  object $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  object $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  object $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function partiallyUpdateDisputeRequest($dispute_id, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling partiallyUpdateDispute'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($pay_pal_request_id !== null) {
            $headerParams['PayPal-Request-Id'] = ObjectSerializer::toHeaderValue($pay_pal_request_id);
        }
        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($pay_pal_partner_attribution_id !== null) {
            $headerParams['PayPal-Partner-Attribution-Id'] = ObjectSerializer::toHeaderValue($pay_pal_partner_attribution_id);
        }
        // header params
        if ($pay_pal_auth_assertion !== null) {
            $headerParams['PayPal-Auth-Assertion'] = ObjectSerializer::toHeaderValue($pay_pal_auth_assertion);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($prefer2 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer2);
        }

        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation provideEvidence
     *
     * Provide evidence
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function provideEvidence($dispute_id)
    {
        $this->provideEvidenceWithHttpInfo($dispute_id);
    }

    /**
     * Operation provideEvidenceWithHttpInfo
     *
     * Provide evidence
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function provideEvidenceWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->provideEvidenceRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation provideEvidenceAsync
     *
     * Provide evidence
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function provideEvidenceAsync($dispute_id)
    {
        return $this->provideEvidenceAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation provideEvidenceAsyncWithHttpInfo
     *
     * Provide evidence
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function provideEvidenceAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->provideEvidenceRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'provideEvidence'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function provideEvidenceRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling provideEvidence'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/provide-evidence';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation provideSupportingInformationForDispute
     *
     * Provide supporting information for dispute
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function provideSupportingInformationForDispute($dispute_id)
    {
        $this->provideSupportingInformationForDisputeWithHttpInfo($dispute_id);
    }

    /**
     * Operation provideSupportingInformationForDisputeWithHttpInfo
     *
     * Provide supporting information for dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function provideSupportingInformationForDisputeWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->provideSupportingInformationForDisputeRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation provideSupportingInformationForDisputeAsync
     *
     * Provide supporting information for dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function provideSupportingInformationForDisputeAsync($dispute_id)
    {
        return $this->provideSupportingInformationForDisputeAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation provideSupportingInformationForDisputeAsyncWithHttpInfo
     *
     * Provide supporting information for dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function provideSupportingInformationForDisputeAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->provideSupportingInformationForDisputeRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'provideSupportingInformationForDispute'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function provideSupportingInformationForDisputeRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling provideSupportingInformationForDispute'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/provide-supporting-info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendMessageAboutDisputeToOtherParty
     *
     * Send message about dispute to other party
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sendMessageAboutDisputeToOtherParty($dispute_id)
    {
        $this->sendMessageAboutDisputeToOtherPartyWithHttpInfo($dispute_id);
    }

    /**
     * Operation sendMessageAboutDisputeToOtherPartyWithHttpInfo
     *
     * Send message about dispute to other party
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendMessageAboutDisputeToOtherPartyWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->sendMessageAboutDisputeToOtherPartyRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sendMessageAboutDisputeToOtherPartyAsync
     *
     * Send message about dispute to other party
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMessageAboutDisputeToOtherPartyAsync($dispute_id)
    {
        return $this->sendMessageAboutDisputeToOtherPartyAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendMessageAboutDisputeToOtherPartyAsyncWithHttpInfo
     *
     * Send message about dispute to other party
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendMessageAboutDisputeToOtherPartyAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->sendMessageAboutDisputeToOtherPartyRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendMessageAboutDisputeToOtherParty'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendMessageAboutDisputeToOtherPartyRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling sendMessageAboutDisputeToOtherParty'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/send-message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settleDispute
     *
     * Settle dispute
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function settleDispute($dispute_id)
    {
        $this->settleDisputeWithHttpInfo($dispute_id);
    }

    /**
     * Operation settleDisputeWithHttpInfo
     *
     * Settle dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function settleDisputeWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->settleDisputeRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation settleDisputeAsync
     *
     * Settle dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleDisputeAsync($dispute_id)
    {
        return $this->settleDisputeAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settleDisputeAsyncWithHttpInfo
     *
     * Settle dispute
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleDisputeAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->settleDisputeRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settleDispute'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function settleDisputeRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling settleDispute'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/adjudicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showDisputeDetails
     *
     * Show dispute details
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function showDisputeDetails($dispute_id)
    {
        $this->showDisputeDetailsWithHttpInfo($dispute_id);
    }

    /**
     * Operation showDisputeDetailsWithHttpInfo
     *
     * Show dispute details
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function showDisputeDetailsWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->showDisputeDetailsRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation showDisputeDetailsAsync
     *
     * Show dispute details
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showDisputeDetailsAsync($dispute_id)
    {
        return $this->showDisputeDetailsAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showDisputeDetailsAsyncWithHttpInfo
     *
     * Show dispute details
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showDisputeDetailsAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->showDisputeDetailsRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showDisputeDetails'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showDisputeDetailsRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling showDisputeDetails'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDisputeStatus
     *
     * Update dispute status
     *
     * @param  object $dispute_id dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateDisputeStatus($dispute_id)
    {
        $this->updateDisputeStatusWithHttpInfo($dispute_id);
    }

    /**
     * Operation updateDisputeStatusWithHttpInfo
     *
     * Update dispute status
     *
     * @param  object $dispute_id (required)
     *
     * @throws \PayPal\Rest-Api\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDisputeStatusWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->updateDisputeStatusRequest($dispute_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateDisputeStatusAsync
     *
     * Update dispute status
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDisputeStatusAsync($dispute_id)
    {
        return $this->updateDisputeStatusAsyncWithHttpInfo($dispute_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDisputeStatusAsyncWithHttpInfo
     *
     * Update dispute status
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDisputeStatusAsyncWithHttpInfo($dispute_id)
    {
        $returnType = '';
        $request = $this->updateDisputeStatusRequest($dispute_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDisputeStatus'
     *
     * @param  object $dispute_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDisputeStatusRequest($dispute_id)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling updateDisputeStatus'
            );
        }

        $resourcePath = '/v1/customer/disputes/{dispute_id}/require-evidence';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'dispute_id' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
