<?php
/**
 * OnboardingLimitedReleaseApi
 * PHP version 5
 *
 * @category Class
 * @package  PayPal\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PayPal APIs
 *
 * # Getting Started  ## Step 1: Fork the collection using Run in Postman  [](https://god.gw.postman.com/run-collection/19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24?action=collection/fork&collection-url=entityId=19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24&entityType=collection&workspaceId=345300e6-346e-42e0-aed1-53717919aef0#?env[PayPal%20Override%20Env]=W3sia2V5IjoiUGxlYXNlIE5vdGUgLS0+IiwidmFsdWUiOiI8IFBheVBhbCBQdWJsaWMgQ29sbGVjdGlvbiBjb21lcyB3aXRoIGRlZmF1bHQgcHVibGljIHNldCBvZiBjcmVkZW50aWFscyBzdG9yZWQgYXQgdGhlIENvbGxlY3Rpb24gbGV2ZWwuIFxuVGhpcyBlbnZpcm9ubWVudCBvdmVycmlkZXMgdGhvc2UgZGVmYXVsdCB2YXJpYWJsZXMuIFlvdSBtYXkgYnJpbmcgeW91ciBvd24gY3JlZGVudGlhbHMgZnJvbSBQYXlQYWwgRGV2ZWxvcGVyIERhc2hib2FyZCBhbmQgcGFzdGUgdGhlbSBoZXJlLiBEbyBub3QgZm9yZ290IHRvIGVuYWJsZSB0aGUgdmFpYWJsZSBieSBjaGVja2luZyB0aGUgYm94IGFuZCBoaXQgXCJTYXZlXCIgYmVmb3JlIGludm9raW5nIHRoZSBQYXlQYWwgQVBJcy4gPiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiI8IGNvcHkgY3JlZGVudGlhbHMgZnJvbSB5b3VyIGRldmVsb3Blci5wYXlwYWwuY29tIGFuZCBwYXN0ZSB0aGVtIGhlcmUgPiIsImVuYWJsZWQiOmZhbHNlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IjwgY29weSBjcmVkZW50aWFscyBmcm9tIHlvdXIgZGV2ZWxvcGVyLnBheXBhbC5jb20gYW5kIHBhc3RlIHRoZW0gaGVyZSA+IiwiZW5hYmxlZCI6ZmFsc2V9XQ==)  [![](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24?action=collection/fork&collection-url=entityId=19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24&entityType=collection&workspaceId=345300e6-346e-42e0-aed1-53717919aef0#?env[PayPal%20Override%20Env]=W3sia2V5IjoiUGxlYXNlIE5vdGUgLS0+IiwidmFsdWUiOiI8IFBheVBhbCBQdWJsaWMgQ29sbGVjdGlvbiBjb21lcyB3aXRoIGRlZmF1bHQgcHVibGljIHNldCBvZiBjcmVkZW50aWFscyBzdG9yZWQgYXQgdGhlIENvbGxlY3Rpb24gbGV2ZWwuIFxuVGhpcyBlbnZpcm9ubWVudCBvdmVycmlkZXMgdGhvc2UgZGVmYXVsdCB2YXJpYWJsZXMuIFlvdSBtYXkgYnJpbmcgeW91ciBvd24gY3JlZGVudGlhbHMgZnJvbSBQYXlQYWwgRGV2ZWxvcGVyIERhc2hib2FyZCBhbmQgcGFzdGUgdGhlbSBoZXJlLiBEbyBub3QgZm9yZ290IHRvIGVuYWJsZSB0aGUgdmFpYWJsZSBieSBjaGVja2luZyB0aGUgYm94IGFuZCBoaXQgXCJTYXZlXCIgYmVmb3JlIGludm9raW5nIHRoZSBQYXlQYWwgQVBJcy4gPiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiI8IGNvcHkgY3JlZGVudGlhbHMgZnJvbSB5b3VyIGRldmVsb3Blci5wYXlwYWwuY29tIGFuZCBwYXN0ZSB0aGVtIGhlcmUgPiIsImVuYWJsZWQiOmZhbHNlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IjwgY29weSBjcmVkZW50aWFscyBmcm9tIHlvdXIgZGV2ZWxvcGVyLnBheXBhbC5jb20gYW5kIHBhc3RlIHRoZW0gaGVyZSA+IiwiZW5hYmxlZCI6ZmFsc2V9XQ==)  ## Step 2: Get your access token  An access token is automatically generated using a default `client_id` and `secret`. PayPal recommends using your own `client_id` and `secret` from the [Developer Dashboard](https://www.paypal.com/signin?intent=developer&returnUri=https%3A%2F%2Fdeveloper.paypal.com%2Fdeveloper%2Fapplication) by entering the values under the **Variables** tab. A pre-request script will generate and manage the `access_token` automatically.  > **Note:** Your developer account `client_id` and `secret` may have a different scope than the default `client_id` and `secret`.  ## Step 3: Make your first API call  PayPal recommends starting with the Orders API. These steps will use the Orders API to create an order and capture payment using [sandbox accounts](https://developer.paypal.com/developer/accounts) linked to your Developer Dashboard account.  To create an order:  1. In your workspace, navigate to your fork of the PayPal collection. 1. Select **Orders > Create Order**. 1. Select the **Send** button to create the order. On a successful call, the API returns a 201 order created response code. 1. In the response, find the **approve** link. 1. Open the **approve** link in a browser. 1. Log in with your Developer Dashboard Sandbox Personal Account credentials. You can find those credentials by logging into the Developer Dashboard and selecting **Sandbox > Account** 1. Select the **Continue** button. Payment has now been made.  To capture payment:  1. In the response of the order you created, find the `order_id`. 1. In the **Variables** tab, enter the `order_id` number. 1. Select **Orders > Capture payment for order**. 1. Select **Send**. On a successful call, the API returns a 201 order created response code.  Your order has been created and payment has been captured. You can verify the transaction in both the sandbox personal account and the sandbox business account.  ![Buyer Payment Verification](https://www.paypalobjects.com/devdoc/transaction-details-buyer.png) ![Seller Payment Verification](https://www.paypalobjects.com/devdoc/transaction-details-seller.png)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PayPal\RestApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PayPal\RestApi\ApiException;
use PayPal\RestApi\Configuration;
use PayPal\RestApi\HeaderSelector;
use PayPal\RestApi\ObjectSerializer;

/**
 * OnboardingLimitedReleaseApi Class Doc Comment
 *
 * @category Class
 * @package  PayPal\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OnboardingLimitedReleaseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createManagedAccount
     *
     * Create managed account
     *
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body46 $body body (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PayPal\RestApi\Model\InlineResponse20113
     */
    public function createManagedAccount($prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {
        list($response) = $this->createManagedAccountWithHttpInfo($prefer, $prefer2, $prefer3, $prefer4, $body);
        return $response;
    }

    /**
     * Operation createManagedAccountWithHttpInfo
     *
     * Create managed account
     *
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body46 $body (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PayPal\RestApi\Model\InlineResponse20113, HTTP status code, HTTP response headers (array of strings)
     */
    public function createManagedAccountWithHttpInfo($prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20113';
        $request = $this->createManagedAccountRequest($prefer, $prefer2, $prefer3, $prefer4, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse20113',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse40031',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse42230',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createManagedAccountAsync
     *
     * Create managed account
     *
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body46 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createManagedAccountAsync($prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {
        return $this->createManagedAccountAsyncWithHttpInfo($prefer, $prefer2, $prefer3, $prefer4, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createManagedAccountAsyncWithHttpInfo
     *
     * Create managed account
     *
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body46 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createManagedAccountAsyncWithHttpInfo($prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20113';
        $request = $this->createManagedAccountRequest($prefer, $prefer2, $prefer3, $prefer4, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createManagedAccount'
     *
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body46 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createManagedAccountRequest($prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {

        $resourcePath = '/v3/customer/managed-accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($prefer2 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer2);
        }
        // header params
        if ($prefer3 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer3);
        }
        // header params
        if ($prefer4 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer4);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation partiallyUpdatesInformationForAManagedAccount
     *
     * Partially updates information for a managed account
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body47[] $body body (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PayPal\RestApi\Model\InlineResponse20047
     */
    public function partiallyUpdatesInformationForAManagedAccount($id, $prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {
        list($response) = $this->partiallyUpdatesInformationForAManagedAccountWithHttpInfo($id, $prefer, $prefer2, $prefer3, $prefer4, $body);
        return $response;
    }

    /**
     * Operation partiallyUpdatesInformationForAManagedAccountWithHttpInfo
     *
     * Partially updates information for a managed account
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body47[] $body (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PayPal\RestApi\Model\InlineResponse20047, HTTP status code, HTTP response headers (array of strings)
     */
    public function partiallyUpdatesInformationForAManagedAccountWithHttpInfo($id, $prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20047';
        $request = $this->partiallyUpdatesInformationForAManagedAccountRequest($id, $prefer, $prefer2, $prefer3, $prefer4, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse20047',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse40465',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse42231',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation partiallyUpdatesInformationForAManagedAccountAsync
     *
     * Partially updates information for a managed account
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body47[] $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partiallyUpdatesInformationForAManagedAccountAsync($id, $prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {
        return $this->partiallyUpdatesInformationForAManagedAccountAsyncWithHttpInfo($id, $prefer, $prefer2, $prefer3, $prefer4, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation partiallyUpdatesInformationForAManagedAccountAsyncWithHttpInfo
     *
     * Partially updates information for a managed account
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body47[] $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function partiallyUpdatesInformationForAManagedAccountAsyncWithHttpInfo($id, $prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20047';
        $request = $this->partiallyUpdatesInformationForAManagedAccountRequest($id, $prefer, $prefer2, $prefer3, $prefer4, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'partiallyUpdatesInformationForAManagedAccount'
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $prefer (Optional)The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the account_id, external_id, and HATEOAS links. (optional)
     * @param  string $prefer2 (Optional) The server returns a complete resource representation without process_view (optional)
     * @param  string $prefer3 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  string $prefer4 (Optional)The server returns complete resource representation along with process_view which includes policies information along with data/documents requirement to fulfill those. (optional)
     * @param  \PayPal\RestApi\Model\Body47[] $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function partiallyUpdatesInformationForAManagedAccountRequest($id, $prefer = null, $prefer2 = null, $prefer3 = null, $prefer4 = null, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling partiallyUpdatesInformationForAManagedAccount'
            );
        }

        $resourcePath = '/v3/customer/managed-accounts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($prefer2 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer2);
        }
        // header params
        if ($prefer3 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer3);
        }
        // header params
        if ($prefer4 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer4);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchManagedAccountBySellerId
     *
     * Search managed account by Seller Id
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PayPal\RestApi\Model\InlineResponse20046
     */
    public function searchManagedAccountBySellerId($id, $views = null)
    {
        list($response) = $this->searchManagedAccountBySellerIdWithHttpInfo($id, $views);
        return $response;
    }

    /**
     * Operation searchManagedAccountBySellerIdWithHttpInfo
     *
     * Search managed account by Seller Id
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PayPal\RestApi\Model\InlineResponse20046, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchManagedAccountBySellerIdWithHttpInfo($id, $views = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20046';
        $request = $this->searchManagedAccountBySellerIdRequest($id, $views);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse20046',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse40032',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse40464',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchManagedAccountBySellerIdAsync
     *
     * Search managed account by Seller Id
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchManagedAccountBySellerIdAsync($id, $views = null)
    {
        return $this->searchManagedAccountBySellerIdAsyncWithHttpInfo($id, $views)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchManagedAccountBySellerIdAsyncWithHttpInfo
     *
     * Search managed account by Seller Id
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchManagedAccountBySellerIdAsyncWithHttpInfo($id, $views = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20046';
        $request = $this->searchManagedAccountBySellerIdRequest($id, $views);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchManagedAccountBySellerId'
     *
     * @param  string $id The ID of the seller. (required)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchManagedAccountBySellerIdRequest($id, $views = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling searchManagedAccountBySellerId'
            );
        }

        $resourcePath = '/v3/customer/managed-accounts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($views !== null) {
            $queryParams['views'] = ObjectSerializer::toQueryValue($views);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchManagedAccountThroughExternalId
     *
     * Search managed account through external id
     *
     * @param  string $external_id The &#x60;external_id&#x60; query parameter can be used to request managed accounts with the given external_id. Searches for the managed account that has the given external_id. To locate a particular account, you should set this to the same value that you provided in the /external_id property in your Create Managed Account request. (optional)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. A comma-separated list of data sets that should be returned in the response. The only allowed value here is process_view, which indicates that the process_view property should be populated in the response; this property contains information on the regulatory processes that must be completed for this merchant. (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PayPal\RestApi\Model\InlineResponse20045
     */
    public function searchManagedAccountThroughExternalId($external_id = null, $views = null)
    {
        list($response) = $this->searchManagedAccountThroughExternalIdWithHttpInfo($external_id, $views);
        return $response;
    }

    /**
     * Operation searchManagedAccountThroughExternalIdWithHttpInfo
     *
     * Search managed account through external id
     *
     * @param  string $external_id The &#x60;external_id&#x60; query parameter can be used to request managed accounts with the given external_id. Searches for the managed account that has the given external_id. To locate a particular account, you should set this to the same value that you provided in the /external_id property in your Create Managed Account request. (optional)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. A comma-separated list of data sets that should be returned in the response. The only allowed value here is process_view, which indicates that the process_view property should be populated in the response; this property contains information on the regulatory processes that must be completed for this merchant. (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PayPal\RestApi\Model\InlineResponse20045, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchManagedAccountThroughExternalIdWithHttpInfo($external_id = null, $views = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20045';
        $request = $this->searchManagedAccountThroughExternalIdRequest($external_id, $views);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse20045',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse40030',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchManagedAccountThroughExternalIdAsync
     *
     * Search managed account through external id
     *
     * @param  string $external_id The &#x60;external_id&#x60; query parameter can be used to request managed accounts with the given external_id. Searches for the managed account that has the given external_id. To locate a particular account, you should set this to the same value that you provided in the /external_id property in your Create Managed Account request. (optional)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. A comma-separated list of data sets that should be returned in the response. The only allowed value here is process_view, which indicates that the process_view property should be populated in the response; this property contains information on the regulatory processes that must be completed for this merchant. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchManagedAccountThroughExternalIdAsync($external_id = null, $views = null)
    {
        return $this->searchManagedAccountThroughExternalIdAsyncWithHttpInfo($external_id, $views)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchManagedAccountThroughExternalIdAsyncWithHttpInfo
     *
     * Search managed account through external id
     *
     * @param  string $external_id The &#x60;external_id&#x60; query parameter can be used to request managed accounts with the given external_id. Searches for the managed account that has the given external_id. To locate a particular account, you should set this to the same value that you provided in the /external_id property in your Create Managed Account request. (optional)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. A comma-separated list of data sets that should be returned in the response. The only allowed value here is process_view, which indicates that the process_view property should be populated in the response; this property contains information on the regulatory processes that must be completed for this merchant. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchManagedAccountThroughExternalIdAsyncWithHttpInfo($external_id = null, $views = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20045';
        $request = $this->searchManagedAccountThroughExternalIdRequest($external_id, $views);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchManagedAccountThroughExternalId'
     *
     * @param  string $external_id The &#x60;external_id&#x60; query parameter can be used to request managed accounts with the given external_id. Searches for the managed account that has the given external_id. To locate a particular account, you should set this to the same value that you provided in the /external_id property in your Create Managed Account request. (optional)
     * @param  string $views (Optional) The &#x60;views&#x60; query parameter can be used to request &#x60;process_view&#x60; in addition to the default GET response. A comma-separated list of data sets that should be returned in the response. The only allowed value here is process_view, which indicates that the process_view property should be populated in the response; this property contains information on the regulatory processes that must be completed for this merchant. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchManagedAccountThroughExternalIdRequest($external_id = null, $views = null)
    {

        $resourcePath = '/v3/customer/managed-accounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($external_id !== null) {
            $queryParams['external_id'] = ObjectSerializer::toQueryValue($external_id);
        }
        // query params
        if ($views !== null) {
            $queryParams['views'] = ObjectSerializer::toQueryValue($views);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showsCollectionOfRegisteredWalletDomains
     *
     * Shows collection of registered wallet domains
     *
     * @param  string $id The ID of the seller. (required)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PayPal\RestApi\Model\InlineResponse20048
     */
    public function showsCollectionOfRegisteredWalletDomains($id)
    {
        list($response) = $this->showsCollectionOfRegisteredWalletDomainsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation showsCollectionOfRegisteredWalletDomainsWithHttpInfo
     *
     * Shows collection of registered wallet domains
     *
     * @param  string $id The ID of the seller. (required)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PayPal\RestApi\Model\InlineResponse20048, HTTP status code, HTTP response headers (array of strings)
     */
    public function showsCollectionOfRegisteredWalletDomainsWithHttpInfo($id)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20048';
        $request = $this->showsCollectionOfRegisteredWalletDomainsRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse20048',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse40466',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation showsCollectionOfRegisteredWalletDomainsAsync
     *
     * Shows collection of registered wallet domains
     *
     * @param  string $id The ID of the seller. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showsCollectionOfRegisteredWalletDomainsAsync($id)
    {
        return $this->showsCollectionOfRegisteredWalletDomainsAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showsCollectionOfRegisteredWalletDomainsAsyncWithHttpInfo
     *
     * Shows collection of registered wallet domains
     *
     * @param  string $id The ID of the seller. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showsCollectionOfRegisteredWalletDomainsAsyncWithHttpInfo($id)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20048';
        $request = $this->showsCollectionOfRegisteredWalletDomainsRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showsCollectionOfRegisteredWalletDomains'
     *
     * @param  string $id The ID of the seller. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function showsCollectionOfRegisteredWalletDomainsRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling showsCollectionOfRegisteredWalletDomains'
            );
        }

        $resourcePath = '/v3/customer/managed-accounts/{id}/wallet-domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
