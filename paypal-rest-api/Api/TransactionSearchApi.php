<?php
/**
 * TransactionSearchApi
 * PHP version 5
 *
 * @category Class
 * @package  PayPal\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PayPal APIs
 *
 * # Getting Started  ## Step 1: Fork the collection using Run in Postman  [](https://god.gw.postman.com/run-collection/19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24?action=collection/fork&collection-url=entityId=19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24&entityType=collection&workspaceId=345300e6-346e-42e0-aed1-53717919aef0#?env[PayPal%20Override%20Env]=W3sia2V5IjoiUGxlYXNlIE5vdGUgLS0+IiwidmFsdWUiOiI8IFBheVBhbCBQdWJsaWMgQ29sbGVjdGlvbiBjb21lcyB3aXRoIGRlZmF1bHQgcHVibGljIHNldCBvZiBjcmVkZW50aWFscyBzdG9yZWQgYXQgdGhlIENvbGxlY3Rpb24gbGV2ZWwuIFxuVGhpcyBlbnZpcm9ubWVudCBvdmVycmlkZXMgdGhvc2UgZGVmYXVsdCB2YXJpYWJsZXMuIFlvdSBtYXkgYnJpbmcgeW91ciBvd24gY3JlZGVudGlhbHMgZnJvbSBQYXlQYWwgRGV2ZWxvcGVyIERhc2hib2FyZCBhbmQgcGFzdGUgdGhlbSBoZXJlLiBEbyBub3QgZm9yZ290IHRvIGVuYWJsZSB0aGUgdmFpYWJsZSBieSBjaGVja2luZyB0aGUgYm94IGFuZCBoaXQgXCJTYXZlXCIgYmVmb3JlIGludm9raW5nIHRoZSBQYXlQYWwgQVBJcy4gPiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiI8IGNvcHkgY3JlZGVudGlhbHMgZnJvbSB5b3VyIGRldmVsb3Blci5wYXlwYWwuY29tIGFuZCBwYXN0ZSB0aGVtIGhlcmUgPiIsImVuYWJsZWQiOmZhbHNlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IjwgY29weSBjcmVkZW50aWFscyBmcm9tIHlvdXIgZGV2ZWxvcGVyLnBheXBhbC5jb20gYW5kIHBhc3RlIHRoZW0gaGVyZSA+IiwiZW5hYmxlZCI6ZmFsc2V9XQ==)  [![](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24?action=collection/fork&collection-url=entityId=19024122-92a85d0e-51e7-47da-9f83-c45dcb1cdf24&entityType=collection&workspaceId=345300e6-346e-42e0-aed1-53717919aef0#?env[PayPal%20Override%20Env]=W3sia2V5IjoiUGxlYXNlIE5vdGUgLS0+IiwidmFsdWUiOiI8IFBheVBhbCBQdWJsaWMgQ29sbGVjdGlvbiBjb21lcyB3aXRoIGRlZmF1bHQgcHVibGljIHNldCBvZiBjcmVkZW50aWFscyBzdG9yZWQgYXQgdGhlIENvbGxlY3Rpb24gbGV2ZWwuIFxuVGhpcyBlbnZpcm9ubWVudCBvdmVycmlkZXMgdGhvc2UgZGVmYXVsdCB2YXJpYWJsZXMuIFlvdSBtYXkgYnJpbmcgeW91ciBvd24gY3JlZGVudGlhbHMgZnJvbSBQYXlQYWwgRGV2ZWxvcGVyIERhc2hib2FyZCBhbmQgcGFzdGUgdGhlbSBoZXJlLiBEbyBub3QgZm9yZ290IHRvIGVuYWJsZSB0aGUgdmFpYWJsZSBieSBjaGVja2luZyB0aGUgYm94IGFuZCBoaXQgXCJTYXZlXCIgYmVmb3JlIGludm9raW5nIHRoZSBQYXlQYWwgQVBJcy4gPiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiI8IGNvcHkgY3JlZGVudGlhbHMgZnJvbSB5b3VyIGRldmVsb3Blci5wYXlwYWwuY29tIGFuZCBwYXN0ZSB0aGVtIGhlcmUgPiIsImVuYWJsZWQiOmZhbHNlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IjwgY29weSBjcmVkZW50aWFscyBmcm9tIHlvdXIgZGV2ZWxvcGVyLnBheXBhbC5jb20gYW5kIHBhc3RlIHRoZW0gaGVyZSA+IiwiZW5hYmxlZCI6ZmFsc2V9XQ==)  ## Step 2: Get your access token  An access token is automatically generated using a default `client_id` and `secret`. PayPal recommends using your own `client_id` and `secret` from the [Developer Dashboard](https://www.paypal.com/signin?intent=developer&returnUri=https%3A%2F%2Fdeveloper.paypal.com%2Fdeveloper%2Fapplication) by entering the values under the **Variables** tab. A pre-request script will generate and manage the `access_token` automatically.  > **Note:** Your developer account `client_id` and `secret` may have a different scope than the default `client_id` and `secret`.  ## Step 3: Make your first API call  PayPal recommends starting with the Orders API. These steps will use the Orders API to create an order and capture payment using [sandbox accounts](https://developer.paypal.com/developer/accounts) linked to your Developer Dashboard account.  To create an order:  1. In your workspace, navigate to your fork of the PayPal collection. 1. Select **Orders > Create Order**. 1. Select the **Send** button to create the order. On a successful call, the API returns a 201 order created response code. 1. In the response, find the **approve** link. 1. Open the **approve** link in a browser. 1. Log in with your Developer Dashboard Sandbox Personal Account credentials. You can find those credentials by logging into the Developer Dashboard and selecting **Sandbox > Account** 1. Select the **Continue** button. Payment has now been made.  To capture payment:  1. In the response of the order you created, find the `order_id`. 1. In the **Variables** tab, enter the `order_id` number. 1. Select **Orders > Capture payment for order**. 1. Select **Send**. On a successful call, the API returns a 201 order created response code.  Your order has been created and payment has been captured. You can verify the transaction in both the sandbox personal account and the sandbox business account.  ![Buyer Payment Verification](https://www.paypalobjects.com/devdoc/transaction-details-buyer.png) ![Seller Payment Verification](https://www.paypalobjects.com/devdoc/transaction-details-seller.png)
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PayPal\RestApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PayPal\RestApi\ApiException;
use PayPal\RestApi\Configuration;
use PayPal\RestApi\HeaderSelector;
use PayPal\RestApi\ObjectSerializer;

/**
 * TransactionSearchApi Class Doc Comment
 *
 * @category Class
 * @package  PayPal\RestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionSearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation listAllBalances
     *
     * List all balances
     *
     * @param  string $as_of_time List balances in the response at the date time provided, will return the last refreshed balance in the system when not provided. (optional)
     * @param  string $currency_code Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/docs/api/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $include_crypto_currencies Indicates whether the response list balances including crypto transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;false&lt;/code&gt;. The default. The response doesn&#39;t include crypto transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;true&lt;/code&gt;. The response also includes crypto transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PayPal\RestApi\Model\InlineResponse20026
     */
    public function listAllBalances($as_of_time = null, $currency_code = null, $include_crypto_currencies = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        list($response) = $this->listAllBalancesWithHttpInfo($as_of_time, $currency_code, $include_crypto_currencies, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);
        return $response;
    }

    /**
     * Operation listAllBalancesWithHttpInfo
     *
     * List all balances
     *
     * @param  string $as_of_time List balances in the response at the date time provided, will return the last refreshed balance in the system when not provided. (optional)
     * @param  string $currency_code Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/docs/api/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $include_crypto_currencies Indicates whether the response list balances including crypto transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;false&lt;/code&gt;. The default. The response doesn&#39;t include crypto transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;true&lt;/code&gt;. The response also includes crypto transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PayPal\RestApi\Model\InlineResponse20026, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAllBalancesWithHttpInfo($as_of_time = null, $currency_code = null, $include_crypto_currencies = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20026';
        $request = $this->listAllBalancesRequest($as_of_time, $currency_code, $include_crypto_currencies, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse20026',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse40018',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAllBalancesAsync
     *
     * List all balances
     *
     * @param  string $as_of_time List balances in the response at the date time provided, will return the last refreshed balance in the system when not provided. (optional)
     * @param  string $currency_code Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/docs/api/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $include_crypto_currencies Indicates whether the response list balances including crypto transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;false&lt;/code&gt;. The default. The response doesn&#39;t include crypto transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;true&lt;/code&gt;. The response also includes crypto transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllBalancesAsync($as_of_time = null, $currency_code = null, $include_crypto_currencies = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        return $this->listAllBalancesAsyncWithHttpInfo($as_of_time, $currency_code, $include_crypto_currencies, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAllBalancesAsyncWithHttpInfo
     *
     * List all balances
     *
     * @param  string $as_of_time List balances in the response at the date time provided, will return the last refreshed balance in the system when not provided. (optional)
     * @param  string $currency_code Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/docs/api/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $include_crypto_currencies Indicates whether the response list balances including crypto transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;false&lt;/code&gt;. The default. The response doesn&#39;t include crypto transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;true&lt;/code&gt;. The response also includes crypto transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAllBalancesAsyncWithHttpInfo($as_of_time = null, $currency_code = null, $include_crypto_currencies = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20026';
        $request = $this->listAllBalancesRequest($as_of_time, $currency_code, $include_crypto_currencies, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAllBalances'
     *
     * @param  string $as_of_time List balances in the response at the date time provided, will return the last refreshed balance in the system when not provided. (optional)
     * @param  string $currency_code Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/docs/api/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $include_crypto_currencies Indicates whether the response list balances including crypto transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;false&lt;/code&gt;. The default. The response doesn&#39;t include crypto transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;true&lt;/code&gt;. The response also includes crypto transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listAllBalancesRequest($as_of_time = null, $currency_code = null, $include_crypto_currencies = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {

        $resourcePath = '/v1/reporting/balances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($as_of_time !== null) {
            $queryParams['as_of_time'] = ObjectSerializer::toQueryValue($as_of_time);
        }
        // query params
        if ($currency_code !== null) {
            $queryParams['currency_code'] = ObjectSerializer::toQueryValue($currency_code);
        }
        // query params
        if ($include_crypto_currencies !== null) {
            $queryParams['include_crypto_currencies'] = ObjectSerializer::toQueryValue($include_crypto_currencies);
        }
        // header params
        if ($pay_pal_request_id !== null) {
            $headerParams['PayPal-Request-Id'] = ObjectSerializer::toHeaderValue($pay_pal_request_id);
        }
        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($pay_pal_partner_attribution_id !== null) {
            $headerParams['PayPal-Partner-Attribution-Id'] = ObjectSerializer::toHeaderValue($pay_pal_partner_attribution_id);
        }
        // header params
        if ($pay_pal_auth_assertion !== null) {
            $headerParams['PayPal-Auth-Assertion'] = ObjectSerializer::toHeaderValue($pay_pal_auth_assertion);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($prefer2 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer2);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransactions
     *
     * List transactions
     *
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $start_date (Required) Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (optional)
     * @param  string $end_date (Required) Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (optional)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/payments/v1/#definition-order&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](https://developer.paypal.com/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional)
     * @param  string $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PayPal\RestApi\Model\InlineResponse20027
     */
    public function listTransactions($fields = null, $start_date = null, $end_date = null, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $balance_affecting_records_only = null, $terminal_id = null, $store_id = null, $page = null, $page_size = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        list($response) = $this->listTransactionsWithHttpInfo($fields, $start_date, $end_date, $transaction_id, $transaction_type, $transaction_status, $transaction_amount, $transaction_currency, $payment_instrument_type, $balance_affecting_records_only, $terminal_id, $store_id, $page, $page_size, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);
        return $response;
    }

    /**
     * Operation listTransactionsWithHttpInfo
     *
     * List transactions
     *
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $start_date (Required) Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (optional)
     * @param  string $end_date (Required) Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (optional)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/payments/v1/#definition-order&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](https://developer.paypal.com/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional)
     * @param  string $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \PayPal\RestApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PayPal\RestApi\Model\InlineResponse20027, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTransactionsWithHttpInfo($fields = null, $start_date = null, $end_date = null, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $balance_affecting_records_only = null, $terminal_id = null, $store_id = null, $page = null, $page_size = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20027';
        $request = $this->listTransactionsRequest($fields, $start_date, $end_date, $transaction_id, $transaction_type, $transaction_status, $transaction_amount, $transaction_currency, $payment_instrument_type, $balance_affecting_records_only, $terminal_id, $store_id, $page, $page_size, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse20027',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse40019',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PayPal\RestApi\Model\InlineResponse40312',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTransactionsAsync
     *
     * List transactions
     *
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $start_date (Required) Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (optional)
     * @param  string $end_date (Required) Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (optional)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/payments/v1/#definition-order&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](https://developer.paypal.com/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional)
     * @param  string $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionsAsync($fields = null, $start_date = null, $end_date = null, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $balance_affecting_records_only = null, $terminal_id = null, $store_id = null, $page = null, $page_size = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        return $this->listTransactionsAsyncWithHttpInfo($fields, $start_date, $end_date, $transaction_id, $transaction_type, $transaction_status, $transaction_amount, $transaction_currency, $payment_instrument_type, $balance_affecting_records_only, $terminal_id, $store_id, $page, $page_size, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransactionsAsyncWithHttpInfo
     *
     * List transactions
     *
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $start_date (Required) Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (optional)
     * @param  string $end_date (Required) Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (optional)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/payments/v1/#definition-order&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](https://developer.paypal.com/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional)
     * @param  string $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransactionsAsyncWithHttpInfo($fields = null, $start_date = null, $end_date = null, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $balance_affecting_records_only = null, $terminal_id = null, $store_id = null, $page = null, $page_size = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {
        $returnType = '\PayPal\RestApi\Model\InlineResponse20027';
        $request = $this->listTransactionsRequest($fields, $start_date, $end_date, $transaction_id, $transaction_type, $transaction_status, $transaction_amount, $transaction_currency, $payment_instrument_type, $balance_affecting_records_only, $terminal_id, $store_id, $page, $page_size, $pay_pal_request_id, $pay_pal_client_metadata_id, $pay_pal_partner_attribution_id, $pay_pal_auth_assertion, $prefer, $prefer2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransactions'
     *
     * @param  string $fields Indicates which fields appear in the response. Value is a single field or a comma-separated list of fields. The &lt;code&gt;transaction_info&lt;/code&gt; value returns only the transaction details in the response. To include all fields in the response, specify &lt;code&gt;fields&#x3D;all&lt;/code&gt;. Valid fields are:&lt;ul&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-transaction_info\&quot;&gt;&lt;code&gt;transaction_info&lt;/code&gt;&lt;/a&gt;. The transaction information. Includes the ID of the PayPal account of the payee, the PayPal-generated transaction ID, the PayPal-generated base ID, the PayPal reference ID type, the transaction event code, the date and time when the transaction was initiated and was last updated, the transaction amounts including the PayPal fee, any discounts, insurance, the transaction status, and other information about the transaction.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-definition-payer_info\&quot;&gt;&lt;code&gt;payer_info&lt;/code&gt;&lt;/a&gt;. The payer information. Includes the PayPal customer account ID and the payer&#39;s email address, primary phone number, name, country code, address, and whether the payer is verified or unverified.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-shipping_info\&quot;&gt;&lt;code&gt;shipping_info&lt;/code&gt;&lt;/a&gt;. The shipping information. Includes the recipient&#39;s name, the shipping method for this order, the shipping address for this order, and the secondary address associated with this order.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-auction_info\&quot;&gt;&lt;code&gt;auction_info&lt;/code&gt;&lt;/a&gt;. The auction information. Includes the name of the auction site, the auction site URL, the ID of the customer who makes the purchase in the auction, and the date and time when the auction closes.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-cart_info\&quot;&gt;&lt;code&gt;cart_info&lt;/code&gt;&lt;/a&gt;. The cart information. Includes an array of item details, whether the item amount or the shipping amount already includes tax, and the ID of the invoice for PayPal-generated invoices.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-incentive_info\&quot;&gt;&lt;code&gt;incentive_info&lt;/code&gt;&lt;/a&gt;. An array of incentive detail objects. Each object includes the incentive, such as a special offer or coupon, the incentive amount, and the incentive program code that identifies a merchant loyalty or incentive program.&lt;/li&gt;&lt;li&gt;&lt;a href&#x3D;\&quot;https://developer.paypal.com/api/transaction-search/v1/#definition-store_info\&quot;&gt;&lt;code&gt;store_info&lt;/code&gt;&lt;/a&gt;. The store information. Includes the ID of the merchant store and the terminal ID for the checkout stand in the merchant store.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $start_date (Required) Filters the transactions in the response by a start date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. (optional)
     * @param  string $end_date (Required) Filters the transactions in the response by an end date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required. Fractional seconds are optional. The maximum supported range is 31 days. (optional)
     * @param  string $transaction_id Filters the transactions in the response by a PayPal transaction ID. A valid transaction ID is 17 characters long, except for an &lt;a href&#x3D;\&quot;https://developer.paypal.com/api/payments/v1/#definition-order&gt;order ID&lt;/a&gt;, which is 19 characters long.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; A transaction ID is not unique in the reporting system. The response can list two transactions with the same ID. One transaction can be balance affecting while the other is non-balance affecting.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_type Filters the transactions in the response by a PayPal transaction event code. See [Transaction event codes](https://developer.paypal.com/docs/integration/direct/transaction-search/transaction-event-codes/). (optional)
     * @param  string $transaction_status Filters the transactions in the response by a PayPal transaction status code. Value is:&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Status&amp;nbsp;code&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;PayPal or merchant rules denied the transaction.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction is pending. The transaction was created but waits for another payment process to complete, such as an ACH transaction, before the status changes to &lt;code&gt;S&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The transaction successfully completed without a denial and after any pending statuses.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;V&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A successful transaction was reversed and funds were refunded to the original sender.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; (optional)
     * @param  string $transaction_amount Filters the transactions in the response by a gross transaction amount range. Specify the range as &#x60;&lt;start-range&gt; TO &lt;end-range&gt;&#x60;, where &#x60;&lt;start-range&gt;&#x60; is the lower limit of the gross PayPal transaction amount and &#x60;&lt;end-range&gt;&#x60; is the upper limit of the gross transaction amount. Specify the amounts in lower denominations. For example, to search for transactions from $5.00 to $10.05, specify &#x60;[500 TO 1005]&#x60;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;The values must be URL encoded.&lt;/blockquote&gt; (optional)
     * @param  string $transaction_currency Filters the transactions in the response by a [three-character ISO-4217 currency code](https://developer.paypal.com/api/rest/reference/currency-codes/) for the PayPal transaction currency. (optional)
     * @param  string $payment_instrument_type Filters the transactions in the response by a payment instrument type. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;CREDITCARD&lt;/code&gt;. Returns a direct credit card transaction with a corresponding value.&lt;/li&gt;&lt;li&gt;&lt;code&gt;DEBITCARD&lt;/code&gt;. Returns a debit card transaction with a corresponding value.&lt;/li&gt;&lt;/ul&gt;If you omit this parameter, the API does not apply this filter. (optional)
     * @param  string $balance_affecting_records_only Indicates whether the response includes only balance-impacting transactions or all transactions. Value is either:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;. The default. The response includes only balance transactions.&lt;/li&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;. The response includes all transactions.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $terminal_id Filters the transactions in the response by a terminal ID. (optional)
     * @param  string $store_id Filters the transactions in the response by a store ID. (optional)
     * @param  string $page The zero-relative start index of the entire list of items that are returned in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. (optional)
     * @param  string $page_size The number of items to return in the response. So, the combination of &#x60;page&#x3D;1&#x60; and &#x60;page_size&#x3D;20&#x60; returns the first 20 items. The combination of &#x60;page&#x3D;2&#x60; and &#x60;page_size&#x3D;20&#x60; returns the next 20 items. (optional)
     * @param  string $pay_pal_request_id The server stores keys for 72 hours. (optional)
     * @param  string $pay_pal_client_metadata_id Optional. Verifies that the payment originates from a valid, user-consented device and application. Reduces fraud and decreases declines. Transactions that do not include a client metadata ID are not eligible for PayPal Seller Protection. (optional)
     * @param  string $pay_pal_partner_attribution_id Optional. Identifies the caller as a PayPal partner. To receive revenue attribution, specify a unique build notation (BN) code. BN codes provide tracking on all transactions that originate or are associated with a particular partner. To find your BN code, see Code and Credential Reference. (optional)
     * @param  string $pay_pal_auth_assertion An API client-provided JSON Web Token (JWT) assertion that identifies the merchant. To use this header, you must get consent to act on behalf of a merchant. (optional)
     * @param  string $prefer The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     * @param  string $prefer2 The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTransactionsRequest($fields = null, $start_date = null, $end_date = null, $transaction_id = null, $transaction_type = null, $transaction_status = null, $transaction_amount = null, $transaction_currency = null, $payment_instrument_type = null, $balance_affecting_records_only = null, $terminal_id = null, $store_id = null, $page = null, $page_size = null, $pay_pal_request_id = null, $pay_pal_client_metadata_id = null, $pay_pal_partner_attribution_id = null, $pay_pal_auth_assertion = null, $prefer = null, $prefer2 = null)
    {

        $resourcePath = '/v1/reporting/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($transaction_id !== null) {
            $queryParams['transaction_id'] = ObjectSerializer::toQueryValue($transaction_id);
        }
        // query params
        if ($transaction_type !== null) {
            $queryParams['transaction_type'] = ObjectSerializer::toQueryValue($transaction_type);
        }
        // query params
        if ($transaction_status !== null) {
            $queryParams['transaction_status'] = ObjectSerializer::toQueryValue($transaction_status);
        }
        // query params
        if ($transaction_amount !== null) {
            $queryParams['transaction_amount'] = ObjectSerializer::toQueryValue($transaction_amount);
        }
        // query params
        if ($transaction_currency !== null) {
            $queryParams['transaction_currency'] = ObjectSerializer::toQueryValue($transaction_currency);
        }
        // query params
        if ($payment_instrument_type !== null) {
            $queryParams['payment_instrument_type'] = ObjectSerializer::toQueryValue($payment_instrument_type);
        }
        // query params
        if ($balance_affecting_records_only !== null) {
            $queryParams['balance_affecting_records_only'] = ObjectSerializer::toQueryValue($balance_affecting_records_only);
        }
        // query params
        if ($terminal_id !== null) {
            $queryParams['terminal_id'] = ObjectSerializer::toQueryValue($terminal_id);
        }
        // query params
        if ($store_id !== null) {
            $queryParams['store_id'] = ObjectSerializer::toQueryValue($store_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // header params
        if ($pay_pal_request_id !== null) {
            $headerParams['PayPal-Request-Id'] = ObjectSerializer::toHeaderValue($pay_pal_request_id);
        }
        // header params
        if ($pay_pal_client_metadata_id !== null) {
            $headerParams['PayPal-Client-Metadata-Id'] = ObjectSerializer::toHeaderValue($pay_pal_client_metadata_id);
        }
        // header params
        if ($pay_pal_partner_attribution_id !== null) {
            $headerParams['PayPal-Partner-Attribution-Id'] = ObjectSerializer::toHeaderValue($pay_pal_partner_attribution_id);
        }
        // header params
        if ($pay_pal_auth_assertion !== null) {
            $headerParams['PayPal-Auth-Assertion'] = ObjectSerializer::toHeaderValue($pay_pal_auth_assertion);
        }
        // header params
        if ($prefer !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer);
        }
        // header params
        if ($prefer2 !== null) {
            $headerParams['Prefer'] = ObjectSerializer::toHeaderValue($prefer2);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
